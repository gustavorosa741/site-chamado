<?php
// dashboard.php
session_start();
include '../BD/conexao.php';

// Verificar autenticação
if (!isset($_SESSION['usuario_id'])) {
    header("Location: login.php");
    exit;
}

// Definir período padrão (30 dias)
$periodo = isset($_GET['periodo']) ? intval($_GET['periodo']) : 30;
$setor = isset($_GET['setor']) ? $_GET['setor'] : '';

// Validar período
$periodos_permitidos = [7, 30, 90, 365];
if (!in_array($periodo, $periodos_permitidos)) {
    $periodo = 30;
}

// Preparar condições para consultas
$condicoes = "WHERE c.data_abertura >= DATE_SUB(NOW(), INTERVAL $periodo DAY)";
if (!empty($setor)) {
    $setor_escape = $conn->real_escape_string($setor);
    $condicoes .= " AND m.setor = '$setor_escape'";
}

// Buscar dados do dashboard
$machineData = [];
$categoryData = [];

// Chamados por máquina
$query = "
    SELECT m.nome_maquina, COUNT(c.id) as total 
    FROM chamado c 
    JOIN maquina m ON c.id_maquina = m.id 
    $condicoes
    GROUP BY m.id 
    ORDER BY total DESC
";

$stmt = $conn->prepare($query);
if ($stmt) {
    $stmt->execute();
    $result = $stmt->get_result();
    while ($row = $result->fetch_assoc()) {
        $machineData[] = $row;
    }
    $stmt->close();
} else {
    error_log("Erro na consulta de máquinas: " . $conn->error);
}

// Chamados por categoria
$query = "
    SELECT cat.categoria, COUNT(c.id) as total 
    FROM chamado c 
    JOIN categoria_chamado cat ON c.categoria = cat.id 
    $condicoes
    GROUP BY cat.id 
    ORDER BY total DESC
";

$stmt = $conn->prepare($query);
if ($stmt) {
    $stmt->execute();
    $result = $stmt->get_result();
    while ($row = $result->fetch_assoc()) {
        $categoryData[] = $row;
    }
    $stmt->close();
} else {
    error_log("Erro na consulta de categorias: " . $conn->error);
}

// Dados para gráfico de timeline (evolução temporal)
$timelineData = [];
$query = "
    SELECT 
        DATE(c.data_abertura) as data, 
        COUNT(*) as total_abertos,
        SUM(CASE WHEN c.data_fechamento IS NOT NULL THEN 1 ELSE 0 END) as total_fechados
    FROM chamado c
    $condicoes
    GROUP BY DATE(c.data_abertura)
    ORDER BY c.data_abertura
";

$result = $conn->query($query);
if ($result) {
    while ($row = $result->fetch_assoc()) {
        $timelineData[] = $row;
    }
} else {
    error_log("Erro na consulta de timeline: " . $conn->error);
}

// Dados para gráfico de tempo de resolução
$resolutionData = [];
$query = "
    SELECT 
        m.nome_maquina,
        AVG(TIMESTAMPDIFF(DAY, c.data_abertura, c.data_fechamento)) as tempo_medio_dias
    FROM chamado c
    JOIN maquina m ON c.id_maquina = m.id
    WHERE c.data_fechamento IS NOT NULL
    AND c.data_abertura >= DATE_SUB(NOW(), INTERVAL $periodo DAY)
    " . (!empty($setor) ? " AND m.setor = '" . $conn->real_escape_string($setor) . "'" : "") . "
    GROUP BY m.id
    ORDER BY tempo_medio_dias DESC
    LIMIT 5
";

$result = $conn->query($query);
if ($result) {
    while ($row = $result->fetch_assoc()) {
        $resolutionData[] = $row;
    }
} else {
    error_log("Erro na consulta de resolução: " . $conn->error);
}

// Buscar estatísticas totais
$totalChamados = 0;
$chamadosAbertos = 0;
$maquinaMaisChamados = '';
$categoriaPrincipal = '';

$query = "SELECT COUNT(*) as total FROM chamado c JOIN maquina m ON c.id_maquina = m.id $condicoes";
$result = $conn->query($query);
if ($result && $row = $result->fetch_assoc()) {
    $totalChamados = $row['total'];
}

$query = "SELECT COUNT(*) as abertos FROM chamado c JOIN maquina m ON c.id_maquina = m.id WHERE c.data_fechamento IS NULL $condicoes";
$result = $conn->query($query);
if ($result && $row = $result->fetch_assoc()) {
    $chamadosAbertos = $row['abertos'];
}

if (!empty($machineData)) {
    $maquinaMaisChamados = $machineData[0]['nome_maquina'];
}

if (!empty($categoryData)) {
    $categoriaPrincipal = $categoryData[0]['categoria'];
}

// Buscar setores disponíveis para o filtro
$setores = [];
$query = "SELECT DISTINCT setor FROM maquina WHERE setor IS NOT NULL AND setor != '' ORDER BY setor";
$result = $conn->query($query);
if ($result) {
    while ($row = $result->fetch_assoc()) {
        $setores[] = $row['setor'];
    }
}

// Processar exportação de relatório
if (isset($_GET['export'])) {
    header('Content-Type: text/csv; charset=utf-8');
    header('Content-Disposition: attachment; filename=relatorio_chamados.csv');
    
    $output = fopen('php://output', 'w');
    
    // Cabeçalho do CSV
    fputcsv($output, ['Relatório de Chamados - Período: ' . $periodo . ' dias'], ';');
    fputcsv($output, []); // Linha vazia
    fputcsv($output, ['Máquina', 'Total de Chamados'], ';');
    
    foreach ($machineData as $maquina) {
        fputcsv($output, [$maquina['nome_maquina'], $maquina['total']], ';');
    }
    
    fputcsv($output, []); // Linha vazia
    fputcsv($output, ['Categoria', 'Total de Chamados'], ';');
    
    foreach ($categoryData as $categoria) {
        fputcsv($output, [$categoria['categoria'], $categoria['total']], ';');
    }
    
    fclose($output);
    exit;
}

// Converter dados para JSON para uso no JavaScript
$machineDataJson = json_encode($machineData);
$categoryDataJson = json_encode($categoryData);
$timelineDataJson = json_encode($timelineData);
$resolutionDataJson = json_encode($resolutionData);
?>

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard de Chamados</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --light-color: #ecf0f1;
            --text-color: #333;
            --card-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f7fa;
            color: var(--text-color);
            padding: 20px;
        }
        
        header {
            background-color: var(--primary-color);
            color: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        h1 {
            font-size: 24px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        
        select, button {
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: white;
            font-size: 14px;
        }
        
        button {
            background-color: var(--secondary-color);
            color: white;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        .dashboard {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .card {
            background-color: white;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
            padding: 20px;
        }
        
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .card-title {
            font-size: 18px;
            font-weight: 600;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .stat-card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: var(--card-shadow);
            text-align: center;
        }
        
        .stat-value {
            font-size: 28px;
            font-weight: bold;
            color: var(--secondary-color);
            margin: 10px 0;
        }
        
        .stat-label {
            color: #777;
            font-size: 14px;
        }
        
        .icon {
            font-size: 20px;
        }
        
        @media (max-width: 768px) {
            .dashboard {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1><span class="icon">📊</span> Dashboard de Chamados</h1>
        <button type="button" onclick="window.location.href='../pagina_principal.php'">Voltar</button>
    </header>
    
    <div class="stats-grid">
        <div class="stat-card">
            <div class="stat-label">Total de Chamados</div>
            <div class="stat-value"><?php echo $totalChamados; ?></div>
            <div class="stat-label"><?php echo $periodo; ?> dias</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Chamados Abertos</div>
            <div class="stat-value"><?php echo $chamadosAbertos; ?></div>
            <div class="stat-label">Em andamento</div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Máquina com Mais Chamados</div>
            <div class="stat-value"><?php echo htmlspecialchars($maquinaMaisChamados); ?></div>
            <div class="stat-label">
                <?php 
                if (!empty($machineData)) {
                    echo $machineData[0]['total'] . ' chamados';
                }
                ?>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-label">Categoria Principal</div>
            <div class="stat-value"><?php echo htmlspecialchars($categoriaPrincipal); ?></div>
            <div class="stat-label">
                <?php 
                if (!empty($categoryData) && $totalChamados > 0) {
                    $percent = round(($categoryData[0]['total'] / $totalChamados) * 100);
                    echo $percent . '% dos chamados';
                }
                ?>
            </div>
        </div>
    </div>
    
    <form method="GET" action="">
        <div class="controls">
            <select id="time-range" name="periodo">
                <option value="7" <?php echo $periodo == 7 ? 'selected' : ''; ?>>Últimos 7 dias</option>
                <option value="30" <?php echo $periodo == 30 ? 'selected' : ''; ?>>Últimos 30 dias</option>
                <option value="90" <?php echo $periodo == 90 ? 'selected' : ''; ?>>Últimos 3 meses</option>
                <option value="365" <?php echo $periodo == 365 ? 'selected' : ''; ?>>Último ano</option>
            </select>
            
            <select id="setor-filter" name="setor">
                <option value="">Todos os setores</option>
                <?php foreach ($setores as $s): ?>
                <option value="<?php echo htmlspecialchars($s); ?>" <?php echo $setor == $s ? 'selected' : ''; ?>>
                    <?php echo htmlspecialchars($s); ?>
                </option>
                <?php endforeach; ?>
            </select>
            
            <button type="submit" id="btn-apply">Aplicar Filtros</button>
            <button type="button" id="btn-export" onclick="exportRelatorio()">Exportar Relatório</button>
        </div>
    </form>
    
    <div class="dashboard">
        <div class="card">
            <div class="card-header">
                <h2 class="card-title"><span class="icon">🔧</span> Chamados por Máquina</h2>
            </div>
            <div class="chart-container">
                <canvas id="machineChart"></canvas>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h2 class="card-title"><span class="icon">📁</span> Chamados por Categoria</h2>
            </div>
            <div class="chart-container">
                <canvas id="categoryChart"></canvas>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h2 class="card-title"><span class="icon">📈</span> Evolução de Chamados</h2>
            </div>
            <div class="chart-container">
                <canvas id="timelineChart"></canvas>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header">
                <h2 class="card-title"><span class="icon">⏱️</span> Tempo Médio de Resolução</h2>
            </div>
            <div class="chart-container">
                <canvas id="resolutionChart"></canvas>
            </div>
        </div>
    </div>

    <script>
        // Dados do PHP convertidos para JavaScript
        const machineDataFromPHP = <?php echo $machineDataJson; ?>;
        const categoryDataFromPHP = <?php echo $categoryDataJson; ?>;
        const timelineDataFromPHP = <?php echo $timelineDataJson; ?>;
        const resolutionDataFromPHP = <?php echo $resolutionDataJson; ?>;

        // Preparar dados para os gráficos
        const machineData = {
            labels: machineDataFromPHP.map(item => item.nome_maquina),
            datasets: [{
                label: 'Número de Chamados',
                data: machineDataFromPHP.map(item => item.total),
                backgroundColor: [
                    'rgba(231, 76, 60, 0.8)',
                    'rgba(241, 196, 15, 0.8)',
                    'rgba(52, 152, 219, 0.8)',
                    'rgba(46, 204, 113, 0.8)',
                    'rgba(155, 89, 182, 0.8)',
                    'rgba(230, 126, 34, 0.8)',
                    'rgba(26, 188, 156, 0.8)'
                ],
                borderColor: [
                    'rgba(231, 76, 60, 1)',
                    'rgba(241, 196, 15, 1)',
                    'rgba(52, 152, 219, 1)',
                    'rgba(46, 204, 113, 1)',
                    'rgba(155, 89, 182, 1)',
                    'rgba(230, 126, 34, 1)',
                    'rgba(26, 188, 156, 1)'
                ],
                borderWidth: 1
            }]
        };

        const categoryData = {
            labels: categoryDataFromPHP.map(item => item.categoria),
            datasets: [{
                label: 'Chamados por Categoria',
                data: categoryDataFromPHP.map(item => item.total),
                backgroundColor: [
                    'rgba(52, 152, 219, 0.7)',
                    'rgba(46, 204, 113, 0.7)',
                    'rgba(155, 89, 182, 0.7)',
                    'rgba(241, 196, 15, 0.7)',
                    'rgba(230, 126, 34, 0.7)',
                    'rgba(231, 76, 60, 0.7)',
                    'rgba(26, 188, 156, 0.7)'
                ],
                borderColor: [
                    'rgba(52, 152, 219, 1)',
                    'rgba(46, 204, 113, 1)',
                    'rgba(155, 89, 182, 1)',
                    'rgba(241, 196, 15, 1)',
                    'rgba(230, 126, 34, 1)',
                    'rgba(231, 76, 60, 1)',
                    'rgba(26, 188, 156, 1)'
                ],
                borderWidth: 1
            }]
        };

        // Preparar dados de timeline
        const timelineLabels = timelineDataFromPHP.map(item => {
            const date = new Date(item.data);
            return date.toLocaleDateString('pt-BR');
        });

        const timelineData = {
            labels: timelineLabels,
            datasets: [{
                label: 'Chamados Abertos',
                data: timelineDataFromPHP.map(item => item.total_abertos),
                borderColor: 'rgba(231, 76, 60, 1)',
                backgroundColor: 'rgba(231, 76, 60, 0.1)',
                tension: 0.4,
                fill: true
            }, {
                label: 'Chamados Resolvidos',
                data: timelineDataFromPHP.map(item => item.total_fechados),
                borderColor: 'rgba(46, 204, 113, 1)',
                backgroundColor: 'rgba(46, 204, 113, 0.1)',
                tension: 0.4,
                fill: true
            }]
        };

        // Preparar dados de tempo de resolução
        const resolutionData = {
            labels: resolutionDataFromPHP.map(item => item.nome_maquina),
            datasets: [{
                label: 'Tempo Médio (dias)',
                data: resolutionDataFromPHP.map(item => parseFloat(item.tempo_medio_dias).toFixed(1)),
                backgroundColor: 'rgba(52, 152, 219, 0.7)',
                borderColor: 'rgba(52, 152, 219, 1)',
                borderWidth: 1
            }]
        };

        // Inicializar os gráficos
        let machineChart, categoryChart, timelineChart, resolutionChart;

        window.onload = function() {
            const machineCtx = document.getElementById('machineChart').getContext('2d');
            const categoryCtx = document.getElementById('categoryChart').getContext('2d');
            const timelineCtx = document.getElementById('timelineChart').getContext('2d');
            const resolutionCtx = document.getElementById('resolutionChart').getContext('2d');
            
            machineChart = new Chart(machineCtx, {
                type: 'bar',
                data: machineData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Chamados por Máquina (Últimos <?php echo $periodo; ?> dias)'
                        }
                    }
                }
            });
            
            categoryChart = new Chart(categoryCtx, {
                type: 'doughnut',
                data: categoryData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Distribuição por Categoria'
                        }
                    }
                }
            });
            
            timelineChart = new Chart(timelineCtx, {
                type: 'line',
                data: timelineData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: true,
                            text: 'Evolução de Chamados'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            resolutionChart = new Chart(resolutionCtx, {
                type: 'bar',
                data: resolutionData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        title: {
                            display: true,
                            text: 'Tempo Médio de Resolução (dias)'
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Dias'
                            }
                        }
                    }
                }
            });
        };

        // Função para exportar relatório
        function exportRelatorio() {
            const periodo = document.getElementById('time-range').value;
            const setor = document.getElementById('setor-filter').value;
            
            let url = '?export=1&periodo=' + periodo;
            if (setor) {
                url += '&setor=' + encodeURIComponent(setor);
            }
            
            window.location.href = url;
        }
    </script>
</body>
</html>